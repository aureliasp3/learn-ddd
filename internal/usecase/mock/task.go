// Code generated by MockGen. DO NOT EDIT.
// Source: ./task.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=./task.go -destination=./mock/task.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "learn-ddd/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskUseCase is a mock of TaskUseCase interface.
type MockTaskUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUseCaseMockRecorder
}

// MockTaskUseCaseMockRecorder is the mock recorder for MockTaskUseCase.
type MockTaskUseCaseMockRecorder struct {
	mock *MockTaskUseCase
}

// NewMockTaskUseCase creates a new mock instance.
func NewMockTaskUseCase(ctrl *gomock.Controller) *MockTaskUseCase {
	mock := &MockTaskUseCase{ctrl: ctrl}
	mock.recorder = &MockTaskUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUseCase) EXPECT() *MockTaskUseCaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskUseCase) CreateTask(ctx context.Context, t *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, t)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUseCaseMockRecorder) CreateTask(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUseCase)(nil).CreateTask), ctx, t)
}

// DeleteTask mocks base method.
func (m *MockTaskUseCase) DeleteTask(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskUseCaseMockRecorder) DeleteTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskUseCase)(nil).DeleteTask), ctx, id)
}

// GetTask mocks base method.
func (m *MockTaskUseCase) GetTask(ctx context.Context, id int64) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, id)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskUseCaseMockRecorder) GetTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskUseCase)(nil).GetTask), ctx, id)
}

// GetTasks mocks base method.
func (m *MockTaskUseCase) GetTasks(ctx context.Context) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", ctx)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskUseCaseMockRecorder) GetTasks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskUseCase)(nil).GetTasks), ctx)
}

// SearchTasks mocks base method.
func (m *MockTaskUseCase) SearchTasks(ctx context.Context, cond map[model.TaskColumn]any) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTasks", ctx, cond)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTasks indicates an expected call of SearchTasks.
func (mr *MockTaskUseCaseMockRecorder) SearchTasks(ctx, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTasks", reflect.TypeOf((*MockTaskUseCase)(nil).SearchTasks), ctx, cond)
}

// UpdateTask mocks base method.
func (m *MockTaskUseCase) UpdateTask(ctx context.Context, t *model.Task) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, t)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskUseCaseMockRecorder) UpdateTask(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskUseCase)(nil).UpdateTask), ctx, t)
}
